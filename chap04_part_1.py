# -*- coding: utf-8 -*-
"""chap04 part 1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17r3d6jFwUVI8PWEnVJYCDPGJydern5Mm

# Simple Hold-out validation
"""

import numpy as np

data = np.arange(100000)

"""num_validation_samples = 10000

np.random.shuffle(data)

validation_data = data[:num_validation_samples]
data = data[num_validation_samples:]

training_data = data[:]

model = get_model()
model.train(training_data)
validation_score = model.evaluate(validation_data)

# At this point you can tune your model,
# retrain it, evaluate it, tune it again...

model = get_model()
model.train(np.concatenate([training_data,
validation_data]))
test_score = model.evaluate(test_data)

test_score = model.evaluate(test_data)""";

"""# K-fold cross-validation"""

"""k = 4
num_validation_samples = len(data) // k

np.random.shuffle(data)

valdation_scores = []

for fold in range(k):
  validation_data = data[num_validation_samples* fold: num_validation_samples * (fold + 1)]
  training_data = data[:num_validation_samples * fold] + data[num_validation_samples * (fold + 1):]

  model = get_model()
  model.train(training_data)
  validation_score = model.evaluate(validation_data)
  validation_scores.append(validation_score)

validation_score = np.average(valdation_scores)

model = get_model()
model.train(data)
test_score = model.evaluate(test_data)""";

